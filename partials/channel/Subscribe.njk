
{%- from "./OnReceivingData.njk" import OnReceivingData %}
{%- from "./ChannelParameterUnwrap.njk" import unwrap %}
{% macro subscribe(channelName, channelParameters, subscribtionMessage, server, defaultContentType) %}
export function subscribe(
    onDataCallback : (err?: NatsTypescriptTemplateError, msg?: {{subscribtionMessage | getMessageType}}{% if channelParameters | length %}, {{channelParameters | realizeParametersForChannel(false)}}{% endif %}) => void, 
    nc: Client
    {% if channelParameters | length %}
      ,{{channelParameters | realizeParametersForChannel}}
    {% endif %}, 
    options?: SubscriptionOptions
  ): Promise<Subscription> {
  return new Promise(async (resolve, reject) => {
    let subscribeOptions: SubscriptionOptions = {... options};
    {%- if subscribtionMessage | hasNatsBindings %}
    {%- if subscribtionMessage.bindings().nats().queue() | length %}
    //If queue
    subscribeOptions.queue = '{{subscribtionMessage.bindings().nats().queue()}}';
    {%- endif %}
    {%- if subscribtionMessage.bindings().nats().unsubAfter() | length %}
    //If unsubafter
    subscribeOptions.max = {{subscribtionMessage.bindings().nats().unsubAfter()}};
    {%- endif %}
    {%- endif %}

    try{
      let subscription = await nc.subscribe({{channelParameters | realizeChannelName(channelName)}}, (err, msg) => {
        if(err){
          onDataCallback(NatsTypescriptTemplateError.errorForCode(ErrorCode.INTERNAL_NATS_TS_ERROR, err));
        }else{
          {%- if channelParameters | length %}
          {{unwrap(channelName, channelParameters)}}
          {%- endif %}
          {%- if subscribtionMessage.payload() | messageHasNotNullPayload %}
          {{OnReceivingData(true, subscribtionMessage, defaultContentType)}}
          onDataCallback(undefined, receivedData{% if channelParameters | length %},
              {%- set counter = 1 %}
              {%- for parameterName, parameter in channelParameters %}
                {{parameterName | camelCase}}Param{%- if counter < (channelParameters | length) %},{%- endif %}
                {%- set counter = counter+1 %}
              {%- endfor %}
              {%- endif %});
          {%- else %}
          onDataCallback(undefined, null{% if channelParameters | length %},
              {%- set counter = 1 %}
              {%- for parameterName, parameter in channelParameters %}
                {{parameterName | camelCase}}Param{%- if counter < (channelParameters | length) %},{%- endif %}
                {%- set counter = counter+1 %}
              {%- endfor %}
              {%- endif %});
          {%- endif %}
        }
      }, subscribeOptions);
      resolve(subscription);
    }catch(e){
      reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.INTERNAL_NATS_TS_ERROR, e));
    }
  })
}

{% endmacro %}
