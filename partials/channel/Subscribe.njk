
{% macro subscribe(channelName, parameters, subscribtionMessage, server) %}
export function subscribe(
  onDataCallback : (err?: NatsError, msg?: {{subscribtionMessage.uid() | pascalCase}}Message{% if parameters | length %}, {{parameters | realizeParametersForChannel(false)}}{% endif %}) => void, 
  nc: Client,
  {% if parameters | length %}
    {{parameters | realizeParametersForChannel}}
  {% endif %}
  ): Promise<Subscription> {
  return new Promise(async (resolve, reject) => {
    try{
      let subscribeOptions: SubscriptionOptions = {};
      {%- if subscribtionMessage | hasNatsBindings %}
      {%- if subscribtionMessage.bindings().nats().queue() | length %}
      //If queue
      subscribeOptions.queue = '{{subscribtionMessage.bindings().nats().queue().name()}}';
      {%- endif %}
      {%- if subscribtionMessage.bindings().nats().unsubAfter() | length %}
      //If unsubafter
      subscribeOptions.max = {{subscribtionMessage.bindings().nats().unsubAfter()}};
      {%- endif %}
      {%- endif %}

      let subscription = nc.subscribe({{parameters | realizeChannelName(channelName)}}, (err, msg) => {
        if(err){
          onDataCallback(err);
        }else{
          {%- if parameters | length %}
          const unmodifiedChannel = {{channelName | realizeChannelNameWithoutParameters}}
          const receivedTopicParameters = {
            {%- set counter = 1 %}
            {%- for parameterName, parameter in parameters %}
              {{parameterName}} : msg.subject.slice(unmodifiedChannel.split("${{'{'+ parameterName+ '}'}}")[0].length, msg.subject.length-unmodifiedChannel.split("${{'{'+parameterName+'}'}}")[1].length){%- if counter < (parameters | length) %},{%- endif %}
              {%- set counter = counter+1 %}
            {%- endfor %}
          }
          {%- endif %}
          let receivedDataHooks = Hooks.getInstance().getRecievedDataHook();
          var processedDataReceived: any = msg.data;
          for(let hook of receivedDataHooks){
            processedDataReceived = hook(processedDataReceived);
          }
          let publishedData = {{subscribtionMessage.name() | pascalCase}}Message.toMessage(processedDataReceived);
          onDataCallback(undefined, publishedData{% if parameters | length %},
              {%- set counter = 1 %}
              {%- for parameterName, parameter in parameters %}
                receivedTopicParameters['{{parameterName}}']{%- if counter < (parameters | length) %},{%- endif %}
                {%- set counter = counter+1 %}
              {%- endfor %}
              {%- endif %});
        }
      }, subscribeOptions);
      resolve(subscription);
    }catch(e){
      reject(e);
    }
  })
}

{% endmacro %}
