
{%- from "./OnSendingData.njk" import OnSendingData %}
{%- from "./OnReceivingData.njk" import OnReceivingData %}
{% macro reply(channelName, channelParameters, replyMessage, receiveMessage, server, params, defaultContentType) %}
export function reply(
    onRequest: (err?: NatsTypescriptTemplateError, msg?: {{receiveMessage | getMessageType}}{% if channelParameters | length %}, {{channelParameters | realizeParametersForChannel(false)}}{% endif %}) => 
    {%- if params.promisifyReplyCallback | length %}Promise<{%- endif %}{{replyMessage | getMessageType}}{%-if params.promisifyReplyCallback | length %}>{%- endif %}, 
    onReplyError: (err: NatsTypescriptTemplateError) => void,
    nc: Client
    {% if channelParameters | length %}
      ,{{channelParameters | realizeParametersForChannel}}
    {% endif %},
    options?: SubscriptionOptions
  ): Promise<Subscription> {
  return new Promise(async (resolve, reject) => {
    try {
      let subscribeOptions: SubscriptionOptions = {... options};
      {%- if receiveMessage | hasNatsBindings %}
      {%- if receiveMessage.bindings().nats().queue() | length %}
      //If queue
      subscribeOptions.queue = '{{receiveMessage.bindings().nats().queue().name()}}';
      {%- endif %}
      {%- endif %}
      subscribeOptions.max = 1;

      let subscription = nc.subscribe({{channelParameters | realizeChannelName(channelName)}}, {%- if params.promisifyReplyCallback | length %}async{%- endif %} (err, msg) => {
        if (err) {
          onRequest(err);
        } else {
          {%- if channelParameters | length %}
          const unmodifiedChannel = {{channelName | realizeChannelNameWithoutParameters}}
          const receivedTopicParameters = {
            {%- set counter = 1 %}
            {%- for parameterName, parameter in channelParameters %}
              {{parameterName}} : msg.subject.slice(unmodifiedChannel.split("{{'{'+ parameterName+ '}'}}")[0].length, msg.subject.length-unmodifiedChannel.split("{{'{'+parameterName+'}'}}")[1].length){%- if counter < (channelParameters | length) %},{%- endif %}
              {%- set counter = counter+1 %}
            {%- endfor %}
          }
          {%- endif %}
          
          {%- if receiveMessage.payload() | messageHasNotNullPayload %}
          {{OnReceivingData(false, receiveMessage, defaultContentType)}}

          let message = {%-if params.promisifyReplyCallback | length %}await{%- endif %} onRequest(undefined, receivedData{% if channelParameters | length %},
            {%- set counter = 1 %}
            {%- for parameterName, parameter in channelParameters %}
              receivedTopicParameters['{{parameterName}}']{%- if counter < (channelParameters | length) %},{%- endif %}
              {%- set counter = counter+1 %}
            {%- endfor %}
            {%- endif %});
          {%- else %}
          let message = {%-if params.promisifyReplyCallback | length %}await{%- endif %} onRequest(undefined, null{% if channelParameters | length %},
            {%- set counter = 1 %}
            {%- for parameterName, parameter in channelParameters %}
              receivedTopicParameters['{{parameterName}}']{%- if counter < (channelParameters | length) %},{%- endif %}
              {%- set counter = counter+1 %}
            {%- endfor %}
            {%- endif %});
          {%- endif %}
          
          if (msg.reply) {
            {%- if replyMessage.payload() | messageHasNotNullPayload %}
            {{OnSendingData(false, replyMessage, defaultContentType)}}
            
            await nc.publish(msg.reply, dataToSend);
            {%- else %}
            await nc.publish(msg.reply, null);
            {%- endif %}
          } else {
            let error = new NatsTypescriptTemplateError('Expected request to need a reply, did not..', '000');
            onReplyError(error)
            return;
          }
        }
      }, subscribeOptions);
      resolve(subscription);
    } catch (e) {
      reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.INTERNAL_NATS_TS_ERROR, e));
    }
  })
}

{% endmacro %}
