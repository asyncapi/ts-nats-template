
{% macro OnReceivingData(promisfyErrors, message, defaultContentType) %}
try {
  let receivedDataHooks = Hooks.getInstance().getreceivedDataHook();
  var receivedData : any = msg.data;
  for(let hook of receivedDataHooks){
    receivedData = hook(receivedData);
  }
  {%- if message.contentType() | isBinaryPayload(defaultContentType) %}
  if(receivedDataHooks.length == 0){
    receivedData = {{message.uid() | pascalCase}}Message.Convert.to{{message.uid() | pascalCase}}(receivedData.toString());
  }
  {%- endif %}
  {%- if message.contentType() | isStringPayload(defaultContentType) %}
  if(receivedDataHooks.length == 0){
    receivedData = {{message.uid() | pascalCase}}Message.Convert.to{{message.uid() | pascalCase}}(receivedData);
  }
  {%- endif %}
} catch (e) {
  const error = NatsTypescriptTemplateError.errorForCode(ErrorCode.HOOK_ERROR, e);
  throw error;
}
{% endmacro %}
