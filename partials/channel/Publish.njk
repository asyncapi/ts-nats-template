
{% macro publish(channelName, channelParameters, publishMessage, server) %}

export function publish(
  requestMessage: {{publishMessage.uid() | pascalCase}}Message.{{publishMessage.uid() | pascalCase}},
  nc: Client,
  {% if channelParameters | length %}
    {{channelParameters | realizeParametersForChannel}}
  {% endif %}
  ): Promise<void> {
  return new Promise<void>(async (resolve, reject) => {
    try{
      let publishDataHooks = Hooks.getInstance().getBeforeSendingDataHook();
      var dataToPublish : any = requestMessage;
      for(let hook of publishDataHooks){
        dataToPublish = hook(dataToPublish);
      }
    }catch(e){
      reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.HOOK_ERROR, e));
      return;
    }
    try{
      nc.publish({{channelParameters | realizeChannelName(channelName)}}, dataToPublish);
      resolve();
    }catch(e){
      reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.INTERNAL_NATS_TS_ERROR, e));
    }
  });
};
{% endmacro %}
