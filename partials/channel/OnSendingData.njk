
{% macro OnSendingData(promisfyErrors, message, defaultContentType) %}
try{
  let beforeSendingHooks = Hooks.getInstance().getBeforeSendingDataHook();
  var dataToSend : any = message;
  for(let hook of beforeSendingHooks){
    dataToSend = hook(dataToSend);
  }
  {%- if message.contentType() | isBinaryPayload(defaultContentType) %}
  if(receivedDataHooks.length == 0 ){
    let error = new NatsTypescriptTemplateError('Missing hooks to convert binary data', '000');
    onReplyError(error);
    return;
  }
  {%- endif %}
  {%- if message.contentType() | isStringPayload(defaultContentType) %}
  if(receivedDataHooks.length == 0 ){
    dataToSend = {{message.uid() | pascalCase}}Message.Convert.{{message.uid() | camelCase}}ToJson(dataToSend);
  }
  {%- endif %}
}catch(e){
  const error = NatsTypescriptTemplateError.errorForCode(ErrorCode.HOOK_ERROR, e);
  {%- if promisfyErrors == true %}
  reject(error);
  {%- else %}
  onReplyError(error)
  {%- endif %}
  return;
}
{% endmacro %}
