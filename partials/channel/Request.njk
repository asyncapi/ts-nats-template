
{% macro request(channelName, parameters, publishMessage, subscribtionMessage, server) %}
export function request(
  requestMessage: {{publishMessage.uid() | pascalCase}}Message,
  nc: Client,
  {% if parameters | length %}
    {{parameters | realizeParametersForChannel}}
  {% endif %}
  ): Promise<{{subscribtionMessage.uid() | pascalCase}}Message> {
  return new Promise<{{subscribtionMessage.uid() | pascalCase}}Message>(async (resolve, reject) => {
    if (nc) {
      try {
        let inbox = nc.createInbox();
        await nc.subscribe(inbox, (err, msg) => {
          if (err) {
            reject(err);
          } else {
            let receivedDataHooks = Hooks.getInstance().getRecievedDataHook();
            var processedDataReceived : any = msg.data;
            for(let hook of receivedDataHooks){
              processedDataReceived = hook(processedDataReceived);
            }
            resolve({{subscribtionMessage.uid() | pascalCase}}Message.toMessage(processedDataReceived));
          }
        }, { max: 1 });
        let publishDataHooks = Hooks.getInstance().getBeforeSendingDataHook();
        var requestData : any = requestMessage;
        for(let hook of publishDataHooks){
          requestData = hook(requestData);
        }
        nc.publish({{parameters | realizeChannelName(channelName)}}, requestData, inbox);
      }catch(e){
        reject(e);
      }
    } else {
      reject(new Error("Nats client is not connected"));
    }
  })
}

{% endmacro %}
