
{%- from "./OnSendingData.njk" import OnSendingData %}
{%- from "./OnReceivingData.njk" import OnReceivingData %}
{% macro request(channelName, channelParameters, recieveMessage, requestMessage, server) %}
export function request(
  message: {{requestMessage | getMessageType}},
  nc: Client,
  {% if channelParameters | length %}
    {{channelParameters | realizeParametersForChannel}}
  {% endif %}
  ): Promise<{{recieveMessage | getMessageType}}> {
  return new Promise(async (resolve, reject) => {
    
    let msg;
    try {
      {%- if requestMessage.payload() | messageHasNotNullPayload %}
      {{OnSendingData()}}
      msg = await nc.request({{channelParameters | realizeChannelName(channelName)}}, undefined, dataToSend)
      {%- else %}
      msg = await nc.request({{channelParameters | realizeChannelName(channelName)}}, undefined, null)
      {%- endif %}
    }catch(e){
      reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.INTERNAL_NATS_TS_ERROR, e));
      return;
    }

    {%- if recieveMessage.payload() | messageHasNotNullPayload %}
    {{OnReceivingData(true)}}
    let recievedData = {{recieveMessage.uid() | pascalCase}}Message.Convert.to{{recieveMessage.uid() | pascalCase}}(receivedData);
    resolve(recievedData);
    {%- else %}
    resolve(null);
    {%- endif %}
  })
}

{% endmacro %}
