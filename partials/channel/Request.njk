
{% macro request(channelName, parameters, publishMessage, subscribtionMessage, server) %}
export function request(
  requestMessage: {{publishMessage.uid() | pascalCase}}Message,
  {% if parameters | length %}
    {{parameters | realizeParametersForChannel}}
  {% endif %}{% if parameters | length %},{% endif %}
  nc?: Client): Promise<{{subscribtionMessage.uid() | pascalCase}}Message> {
  return new Promise<{{subscribtionMessage.uid() | pascalCase}}Message>(async (resolve, reject) => {
    if (nc) {
      try {
        let inbox = nc.createInbox();
        await nc.subscribe(inbox, (err, msg) => {
          if (err) {
            reject(err);
          } else {
            let processedData = utils.processRecievedData(msg.data, Payload.{{server | tsPayload}}, '{{server | tsEncoding}}');
            resolve({{subscribtionMessage.uid() | pascalCase}}Message.toMessage(processedData));
          }
        }, { max: 1 });
        let publishDataHooks = getHooks(AvailableHooks.BeforeSendingData);
        let publishDataHooks = hooks.getHooks(AvailableHooks.BeforeSendingData) as hooks.BeforeSendingDataHook[];
        var requestData;
        for(let hook in publishDataHooks){
          requestData = hook(requestMessage);
        }
        nc.publish(realizeChannelName('{{channelName}}', {
          {% for parameterName, parameter in parameters %}
            "{{parameterName}}": {{parameterName}}
          {% endfor %}
        }), requestData, inbox);
      }catch(e){
        reject(e);
      }
    } else {
      reject(new Error("Nats client is not connected"));
    }
  })
}

{% endmacro %}
