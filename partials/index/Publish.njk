
{% macro publish(defaultContentType, channelName, message, messageDescription, parameters) %}
  /**
  *  {{messageDescription}}
  * @param requestMessage The message to publish.
  */
  public publishTo{{channelName | pascalCase }}(requestMessage: {{ message.uid() | pascalCase }}Message {% if parameters | length %}
    ,{{parameters | realizeParametersForChannel}}
  {% endif %}): Promise<void> {
    {%- if message.contentType() | isBinaryPayload(defaultContentType) %}
    const nc: Client = this.binaryClient!;
    {%- endif %}
    {%- if message.contentType() | isStringPayload(defaultContentType) %}
    const nc: Client = this.stringClient!;
    {%- endif %}
    {%- if message.contentType() | isJsonPayload(defaultContentType) %}
    const nc: Client = this.jsonClient!;
    {%- endif %}
    if(nc){
      return {{ channelName | camelCase }}Channel.publish(requestMessage, nc
      {% if parameters | length %}
        ,{{parameters | realizeParametersForChannelWithoutType}}
      {% endif %});
    }else{
      reject(new Error("Nats client is not connected"));
    }
  }
{% endmacro %}
