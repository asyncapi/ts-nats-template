
{% macro subscribe(defaultContentType, channelName, message, messageDescription, channelParameters) %}
  /**
  *  {{messageDescription}}
  * @param onDataCallback Called when message received.
  */
  public subscribeTo{{channelName | pascalCase }}(
      onDataCallback : (err?: NatsTypescriptTemplateError, msg?: {{message | getMessageType}}{% if channelParameters | length %}, {{channelParameters | realizeParametersForChannel(false)}}{% endif %}) => void
      {% if channelParameters | length %}
      ,{{channelParameters | realizeParametersForChannel}}
      {% endif %}, 
      flush?: boolean,
      options?: SubscriptionOptions
    ): Promise<Subscription> {
    return new Promise(async (resolve, reject) => {
    {%- if message.contentType() | isBinaryPayload(defaultContentType) %}
    const nc: Client = this.binaryClient!;
    {%- endif %}
    {%- if message.contentType() | isStringPayload(defaultContentType) %}
    const nc: Client = this.stringClient!;
    {%- endif %}
    {%- if message.contentType() | isJsonPayload(defaultContentType) %}
    const nc: Client = this.jsonClient!;
    {%- endif %}
      if (nc) {
        try {
          const sub = await {{ channelName | camelCase }}Channel.subscribe(
            onDataCallback, nc
            {% if channelParameters | length %}
              ,{{channelParameters | realizeParametersForChannelWithoutType}}
            {% endif %}, 
            options
          );
          if(flush){
            this.jsonClient!.flush(() => {
              resolve(sub);
            });
          }else{
            resolve(sub);
          }
        } catch (e) {
          reject(e);
        }
      } else {
        reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.NOT_CONNECTED));
      }
    });
  }
{% endmacro %}
