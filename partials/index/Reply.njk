
{% macro reply(defaultContentType, channelName, subscribeMessage, publishMessage, messageDescription, channelParameters, params) %}
  /**
  *  {{messageDescription}}
  * @param onRequest Called when request recieved.
  * @param onReplyError Called when it was not possible to send the reply.
  */
  public replyTo{{channelName | pascalCase }}(onRequest : (err?: NatsTypescriptTemplateError, msg?: {{ subscribeMessage.uid() | pascalCase }}Message{% if channelParameters | length %}, {{channelParameters | realizeParametersForChannel(false)}}{% endif %}) => {%- if params.promisifyReplyCallback | length %}Promise<{%- endif %}{{ publishMessage.uid() | pascalCase }}Message{%- if params.promisifyReplyCallback | length %}>{%- endif %}, onReplyError : (err: NatsTypescriptTemplateError) => void 
  {% if channelParameters | length %}
    ,{{channelParameters | realizeParametersForChannel}}
  {% endif %}): Promise<Subscription> {
    {%- if subscribeMessage.contentType() | isBinaryPayload(defaultContentType) %}
    const nc: Client = this.binaryClient!;
    {%- endif %}
    {%- if subscribeMessage.contentType() | isStringPayload(defaultContentType) %}
    const nc: Client = this.stringClient!;
    {%- endif %}
    {%- if subscribeMessage.contentType() | isJsonPayload(defaultContentType) %}
    const nc: Client = this.jsonClient!;
    {%- endif %}
    
    if(nc){
      return {{ channelName | camelCase }}Channel.reply(onRequest, onReplyError, nc
      {% if channelParameters | length %}
        ,{{channelParameters | realizeParametersForChannelWithoutType}}
      {% endif %});
    }else{
      return Promise.reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.NOT_CONNECTED));
    }
  }
{% endmacro %}
