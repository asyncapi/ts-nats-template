
{% macro reply(defaultContentType, channelName, replyMessage, receiveMessage, messageDescription, channelParameters, params) %}
  /**
  *  {{messageDescription}}
  * @param onRequest Called when request received.
  * @param onReplyError Called when it was not possible to send the reply.
  */
  public replyTo{{channelName | pascalCase }}(
      onRequest : (
        err?: NatsTypescriptTemplateError, 
        msg?: {{receiveMessage | getMessageType}}
        {%- if channelParameters | length %},{{channelParameters | realizeParametersForChannel(false)}}{% endif %}
      ) => {%- if params.promisifyReplyCallback | length %}Promise<{%- endif %}{{replyMessage | getMessageType}}{%- if params.promisifyReplyCallback | length %}>{%- endif %}, 
      onReplyError : (err: NatsTypescriptTemplateError) => void 
      {% if channelParameters | length %}
        ,{{channelParameters | realizeParametersForChannel}}
      {% endif %}, 
      flush?: boolean,
      options?: SubscriptionOptions
    ): Promise<Subscription> {
    return new Promise(async (resolve, reject) => {
      {%- if receiveMessage.contentType() | isBinaryPayload(defaultContentType) %}
      const nc: Client = this.binaryClient!;
      {%- endif %}
      {%- if receiveMessage.contentType() | isStringPayload(defaultContentType) %}
      const nc: Client = this.stringClient!;
      {%- endif %}
      {%- if receiveMessage.contentType() | isJsonPayload(defaultContentType) %}
      const nc: Client = this.jsonClient!;
      {%- endif %}
      if (nc) {
        try {
          const sub = await {{ channelName | camelCase }}Channel.reply(
            onRequest, 
            onReplyError, 
            nc
          {% if channelParameters | length %}
            ,{{channelParameters | realizeParametersForChannelWithoutType}}
          {% endif %},
            options
          );
          if(flush){
            this.jsonClient!.flush(() => {
              resolve(sub);
            });
          }else{
            resolve(sub);
          }
        } catch (e) {
          reject(e);
        }
      } else {
        reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.NOT_CONNECTED));
      }
    });
  }
{% endmacro %}
