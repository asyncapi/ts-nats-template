
{% macro request(defaultContentType, channelName, requestMessage, replyMessage, messageDescription, channelParameters) %}
  /**
  *  {{messageDescription}}
  * @param requestMessage The request message to send.
  */
  public request{{channelName | pascalCase }}(
    requestMessage:{{requestMessage | getMessageType}} 
    {% if channelParameters | length %}
      ,{{channelParameters | realizeParametersForChannel}}
    {% endif %}
  ): Promise<{{replyMessage | getMessageType}}> {
    {%- if requestMessage.contentType() | isBinaryPayload(defaultContentType) %}
    const nc: Client = this.binaryClient!;
    {%- endif %}
    {%- if requestMessage.contentType() | isStringPayload(defaultContentType) %}
    const nc: Client = this.stringClient!;
    {%- endif %}
    {%- if requestMessage.contentType() | isJsonPayload(defaultContentType) %}
    const nc: Client = this.jsonClient!;
    {%- endif %}
    if(nc){
      return {{ channelName | camelCase }}Channel.request(
        requestMessage, 
        nc
        {% if channelParameters | length %}
          ,{{channelParameters | realizeParametersForChannelWithoutType}}
        {% endif %}
      );
    }else{
      return Promise.reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.NOT_CONNECTED));
    }
  }
{% endmacro %}
