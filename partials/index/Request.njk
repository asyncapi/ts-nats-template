
{% macro request(defaultContentType, channelName, publishMessage, subscribeMessage, messageDescription, channelParameters) %}
  /**
  *  {{messageDescription}}
  * @param requestMessage The request message to send.
  */
  public request{{channelName | pascalCase }}(requestMessage: {{ subscribeMessage.uid() | pascalCase }}Message 
  {% if channelParameters | length %}
    ,{{channelParameters | realizeParametersForChannel}}
  {% endif %}): Promise<{{ publishMessage.uid() | pascalCase }}Message> {
    {%- if subscribeMessage.contentType() | isBinaryPayload(defaultContentType) %}
    const nc: Client = this.binaryClient!;
    {%- endif %}
    {%- if subscribeMessage.contentType() | isStringPayload(defaultContentType) %}
    const nc: Client = this.stringClient!;
    {%- endif %}
    {%- if subscribeMessage.contentType() | isJsonPayload(defaultContentType) %}
    const nc: Client = this.jsonClient!;
    {%- endif %}
    if(nc){
      return {{ channelName | camelCase }}Channel.request(requestMessage, nc
      {% if channelParameters | length %}
        ,{{channelParameters | realizeParametersForChannelWithoutType}}
      {% endif %});
    }else{
      return Promise.reject(NatsTypescriptTemplateError.errorForCode(ErrorCode.NOT_CONNECTED));
    }
  }
{% endmacro %}
