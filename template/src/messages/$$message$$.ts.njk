{%- macro initProperties(schema, required=true) %}
  {%- if schema.allOf() | length %}
    {%- for allOfSchema in schema.allOf() %}
    {{initProperties(allOfSchema)}}
    {%- endfor %}
  {%- endif %}
  {%- if schema.oneOf() | length %}
    oneOf:{{schema.oneOf() | oneOfSchemaType}}
  {%- endif %}
  {%- if schema.anyOf() | length %}
    {%- for anyOfSchema in schema.anyOf() %}
    {{initProperties(anyOfSchema, false)}}
    {%- endfor %}
  {%- endif %}
  
  {%- if schema.type() == "object" %}
    {{initProperty(schema.uid(), schema.uid())}}
  {%- elif schema.type() | length%}
    type: {{ schema.type() | toTsType }}
  {%- endif %}
{%- endmacro %}
{%- macro setConstructorProperties(schema) %}
  {%- if schema.allOf() | length %}
    {%- for allOfSchema in schema.allOf() %}
    {{setConstructorProperties(allOfSchema)}}
    {%- endfor %}
  {%- endif %}
  
  {%- if schema.type() == "object" %}
    {{setProperty(schema.uid())}}
  {%- elif schema.type() | length %}
    {{setProperty("type")}}
  {%- endif %}
{%- endmacro %}
{%- macro initProperty(propertyName, propertyType) %}
  {{propertyName | camelCase}}:{{propertyType | pascalCase}}Schema;
{% endmacro %}

{%- macro setProperty(propertyName) %}
    this.{{propertyName | camelCase}} = {{propertyName | camelCase}};
{% endmacro %}

{%- for _, import in (message.payload() | genericImports) %}
{{import | safe }}
{%- endfor %}
export default class {{ message.name() | pascalCase}} {
  {{ initProperties(message.payload()) }}

  constructor(
    {{message.payload() | messageConstructorParameters}}
  ){
  {{setConstructorProperties(message.payload())}}
  }

  /**
   * Parses a JSON string to an object of {{ message.name() | pascalCase}} message class.
   * @param json any to be parsed as {{ message.name() | pascalCase}}.
   */
  public static toMessage(json: any): {{ message.name() | pascalCase }} {
    return JSON.parse(JSON.stringify(json));
  }

}
